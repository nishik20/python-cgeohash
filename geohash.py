# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_geohash', [dirname(__file__)])
        except ImportError:
            import _geohash
            return _geohash
        if fp is not None:
            try:
                _mod = imp.load_module('_geohash', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _geohash = swig_import_helper()
    del swig_import_helper
else:
    import _geohash
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class GeoBoxDimension(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    height = _swig_property(_geohash.GeoBoxDimension_height_get, _geohash.GeoBoxDimension_height_set)
    width = _swig_property(_geohash.GeoBoxDimension_width_get, _geohash.GeoBoxDimension_width_set)
    def __init__(self): 
        this = _geohash.new_GeoBoxDimension()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _geohash.delete_GeoBoxDimension
    __del__ = lambda self : None;
GeoBoxDimension_swigregister = _geohash.GeoBoxDimension_swigregister
GeoBoxDimension_swigregister(GeoBoxDimension)

class GeoCoord(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    latitude = _swig_property(_geohash.GeoCoord_latitude_get, _geohash.GeoCoord_latitude_set)
    longitude = _swig_property(_geohash.GeoCoord_longitude_get, _geohash.GeoCoord_longitude_set)
    north = _swig_property(_geohash.GeoCoord_north_get, _geohash.GeoCoord_north_set)
    east = _swig_property(_geohash.GeoCoord_east_get, _geohash.GeoCoord_east_set)
    south = _swig_property(_geohash.GeoCoord_south_get, _geohash.GeoCoord_south_set)
    west = _swig_property(_geohash.GeoCoord_west_get, _geohash.GeoCoord_west_set)
    dimension = _swig_property(_geohash.GeoCoord_dimension_get, _geohash.GeoCoord_dimension_set)
    def __init__(self): 
        this = _geohash.new_GeoCoord()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _geohash.delete_GeoCoord
    __del__ = lambda self : None;
GeoCoord_swigregister = _geohash.GeoCoord_swigregister
GeoCoord_swigregister(GeoCoord)


def encode(*args):
  return _geohash.encode(*args)
encode = _geohash.encode

def decode(*args):
  return _geohash.decode(*args)
decode = _geohash.decode

def geohash_neighbors(*args):
  return _geohash.geohash_neighbors(*args)
geohash_neighbors = _geohash.geohash_neighbors

def geohash_dimensions_for_precision(*args):
  return _geohash.geohash_dimensions_for_precision(*args)
geohash_dimensions_for_precision = _geohash.geohash_dimensions_for_precision


